name: üèôÔ∏è Kings Cross Data Logger

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"  # every hour

jobs:
  fetch-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install requests matplotlib

      - name: Fetch data & generate dashboard
        env:
          OPENWEATHER_KEY: ${{ secrets.OPENWEATHER_KEY }}
          TFL_APP_KEY: ${{ secrets.TFL_APP_KEY }}
          EVENTBRITE_TOKEN: ${{ secrets.EVENTBRITE_TOKEN }}
        run: |
          python - <<'EOF'
          import os, requests, json, datetime, pathlib, matplotlib.pyplot as plt

          pathlib.Path("data").mkdir(exist_ok=True)

          # --- WEATHER DATA ---
          API_KEY = os.getenv("OPENWEATHER_KEY")
          if not API_KEY: raise Exception("‚ùå OPENWEATHER_KEY missing")
          LAT, LON = 51.5308, -0.1238
          r = requests.get(f"https://api.openweathermap.org/data/2.5/weather?lat={LAT}&lon={LON}&appid={API_KEY}&units=metric")
          data = r.json()
          if "main" not in data: raise Exception(f"‚ùå OpenWeather API error: {data}")
          weather_info = {"temperature_C": data["main"]["temp"], "windspeed_kmh": data["wind"]["speed"], "weather_code": data["weather"][0]["id"]}

          # --- TFL DATA ---
          tfl_key = os.getenv("TFL_APP_KEY")
          tfl_r = requests.get(f"https://api.tfl.gov.uk/Line/Mode/tube/Status?app_key={tfl_key}")
          tfl_data = tfl_r.json()
          kings_cross_lines = {"Northern","Piccadilly","Victoria","Circle","Hammersmith & City","Metropolitan"}
          tfl_filtered = [{"name": l["name"],"mode":l["modeName"],"status":l["lineStatuses"][0]["statusSeverityDescription"]} for l in tfl_data if l["name"] in kings_cross_lines]

          # --- EVENTBRITE EVENTS ---
          EB_TOKEN = os.getenv("EVENTBRITE_TOKEN")
          if not EB_TOKEN: raise Exception("‚ùå EVENTBRITE_TOKEN missing")
          eb_url = f"https://www.eventbriteapi.com/v3/events/search/?location.address=Kings+Cross+London&token={EB_TOKEN}&sort_by=date"
          eb_r = requests.get(eb_url)
          eb_data = eb_r.json()

          print("üîç Eventbrite API response keys:", list(eb_data.keys()))
          print("üîπ Raw API response preview:", json.dumps(eb_data.get("events", [])[:2], indent=2))

          events = []
          for e in eb_data.get("events", []):
              events.append({
                  "name": e["name"]["text"],
                  "start": e["start"]["local"],
                  "url": e["url"]
              })
          print(f"üîπ Fetched {len(events)} events")

          with open("data/events.json","w") as f:
              json.dump(events,f,indent=2)

          # --- DASHBOARD JSON ---
          dashboard = {"timestamp": datetime.datetime.utcnow().isoformat()+"Z", "weather": weather_info, "tfl": tfl_filtered}
          with open("data/kingscross_dashboard.json","w") as f: json.dump(dashboard,f,indent=2)

          # --- HISTORY FOR LAST 24H ---
          history_path = "data/kingscross_history.json"
          history = []
          if os.path.exists(history_path):
              try:
                  with open(history_path) as f:
                      history = json.load(f)
              except json.JSONDecodeError:
                  print("‚ö†Ô∏è Malformed history JSON detected ‚Äî resetting history.")
                  history = []

          history.append({"timestamp": dashboard["timestamp"], "temperature_C": dashboard["weather"]["temperature_C"], "tfl": dashboard["tfl"]})
          history = history[-24:]  # keep only last 24 entries
          with open(history_path,"w") as f: json.dump(history,f,indent=2)

          # --- DASHBOARD IMAGE ---
          color_map = {"Good Service":"green","Minor Delays":"orange","Severe Delays":"red","Part Closure":"purple","Planned Closure":"gray","Service Closed":"black"}
          fig, (ax1, ax2) = plt.subplots(1,2,figsize=(12,5))
          timestamps = [datetime.datetime.fromisoformat(d["timestamp"].replace("Z","")) for d in history]
          temps = [d["temperature_C"] for d in history]
          ax1.plot(timestamps, temps, marker="o", color="blue")
          ax1.set_title("Kings Cross Temperature Trend (¬∞C)")
          ax1.set_xlabel("Time (UTC)"); ax1.set_ylabel("Temperature ¬∞C"); ax1.grid(True)

          names = [line["name"] for line in tfl_filtered]
          statuses = [line["status"] for line in tfl_filtered]
          colors = [color_map.get(s,"gray") for s in statuses]
          ax2.barh(names,[1]*len(names),color=colors)
          for i,s in enumerate(statuses): ax2.text(0.02,i,s,va="center",ha="left",color="
