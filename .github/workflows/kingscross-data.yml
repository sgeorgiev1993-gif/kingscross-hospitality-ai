name: üèôÔ∏è Kings Cross Data Logger

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"  # every hour

jobs:
  fetch-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install requests matplotlib

      - name: Fetch data & generate dashboard
        env:
          OPENWEATHER_KEY: ${{ secrets.OPENWEATHER_KEY }}
          TFL_APP_KEY: ${{ secrets.TFL_APP_KEY }}
          EVENTBRITE_TOKEN: ${{ secrets.EVENTBRITE_TOKEN }}
        run: |
          python - <<'EOF'
          import os, requests, json, datetime, pathlib, matplotlib.pyplot as plt

          pathlib.Path("data").mkdir(exist_ok=True)

          # --- WEATHER DATA ---
          API_KEY = os.getenv("OPENWEATHER_KEY")
          if not API_KEY: raise Exception("‚ùå OPENWEATHER_KEY missing")
          LAT, LON = 51.5308, -0.1238
          r = requests.get(f"https://api.openweathermap.org/data/2.5/weather?lat={LAT}&lon={LON}&appid={API_KEY}&units=metric")
          data = r.json()
          if "main" not in data: raise Exception(f"‚ùå OpenWeather API error: {data}")
          weather_info = {"temperature_C": data["main"]["temp"], "windspeed_kmh": data["wind"]["speed"], "weather_code": data["weather"][0]["id"]}

          # --- TFL DATA ---
          tfl_key = os.getenv("TFL_APP_KEY")
          tfl_r = requests.get(f"https://api.tfl.gov.uk/Line/Mode/tube/Status?app_key={tfl_key}")
          tfl_data = tfl_r.json()
          kings_cross_lines = {"Northern","Piccadilly","Victoria","Circle","Hammersmith & City","Metropolitan"}
          tfl_filtered = [{"name": l["name"],"mode":l["modeName"],"status":l["lineStatuses"][0]["statusSeverityDescription"]} for l in tfl_data if l["name"] in kings_cross_lines]

          # --- EVENTBRITE EVENTS ---
          EB_TOKEN = os.getenv("EVENTBRITE_TOKEN")
          if not EB_TOKEN: raise Exception("‚ùå EVENTBRITE_TOKEN missing")
          eb_url = f"https://www.eventbriteapi.com/v3/events/search/?location.address=Kings+Cross+London&token={EB_TOKEN}&sort_by=date"
          eb_r = requests.get(eb_url)
          eb_data = eb_r.json()
          events = []
          for e in eb_data.get("events", []):
              events.append({
                  "name": e["name"]["text"],
                  "start": e["start"]["local"],
                  "url": e["url"]
              })
          with open("data/events.json","w") as f:
              json.dump(events,f,indent=2)

          # --- DASHBOARD JSON ---
          dashboard = {"timestamp": datetime.datetime.utcnow().isoformat()+"Z", "weather": weather_info, "tfl": tfl_filtered}
          with open("data/kingscross_dashboard.json","w") as f: json.dump(dashboard,f,indent=2)

          # --- HISTORY FOR LAST 24H ---
          history_path = "data/kingscross_history.json"
          history = []
          if os.path.exists(history_path):
              try:
                  with open(history_path) as f:
                      history = json.load(f)
              except json.JSONDecodeError:
                  print("‚ö†Ô∏è Malformed history JSON detected ‚Äî resetting history.")
                  history = []
          history.append({"timestamp": dashboard["timestamp"], "temperature_C": dashboard["weather"]["temperature_C"], "tfl": dashboard["tfl"]})
          history = history[-24:]
          with open(history_path,"w") as f: json.dump(history,f,indent=2)

          # --- DASHBOARD IMAGE ---
          color_map = {"Good Service":"green","Minor Delays":"orange","Severe Delays":"red","Part Closure":"purple","Planned Closure":"gray","Service Closed":"black"}
          fig, (ax1, ax2) = plt.subplots(1,2,figsize=(12,5))
          timestamps = [datetime.datetime.fromisoformat(d["timestamp"].replace("Z","")) for d in history]
          temps = [d["temperature_C"] for d in history]
          ax1.plot(timestamps, temps, marker="o", color="blue")
          ax1.set_title("Kings Cross Temperature Trend (¬∞C)")
          ax1.set_xlabel("Time (UTC)"); ax1.set_ylabel("Temperature ¬∞C"); ax1.grid(True)
          names = [line["name"] for line in tfl_filtered]
          statuses = [line["status"] for line in tfl_filtered]
          colors = [color_map.get(s,"gray") for s in statuses]
          ax2.barh(names,[1]*len(names),color=colors)
          for i,s in enumerate(statuses): ax2.text(0.02,i,s,va="center",ha="left",color="white",fontsize=10,fontweight="bold")
          ax2.set_xlim(0,1); ax2.set_xticks([]); ax2.set_title("TfL Line Status at Kings Cross")
          fig.text(0.5,0.01,datetime.datetime.utcnow().strftime("Updated: %d %b %Y, %H:%M UTC"),ha="center",fontsize=9,color="gray")
          plt.tight_layout(rect=[0,0.03,1,1])
          plt.savefig("data/kingscross_dashboard.png")
          plt.close(fig)

          # --- LAST 24H TEMP + TFLS IMAGE ---
          fig, ax = plt.subplots(figsize=(10,6))
          ax.plot(timestamps, temps, marker="o", color='blue', label="Temperature ¬∞C")
          ax.set_title("Kings Cross Last 24h: Temp + TfL Status")
          ax.set_ylabel("Temperature (¬∞C)")
          ax.set_xticks(timestamps)
          ax.set_xticklabels([t.strftime("%H:%M") for t in timestamps], rotation=45)
          plt.tight_layout()
          plt.savefig("data/kingscross_temp_24h_tfl.png")
          plt.close(fig)
          EOF

      - name: Create web dashboard
        run: |
          cat > index.html <<'HTML'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Kings Cross Live Dashboard</title>
            <style>
              body { font-family: Arial, sans-serif; text-align: center; background: #fafafa; padding: 40px; }
              h1,h2 { color:#333; }
              img { max-width:90%; border-radius:12px; box-shadow:0 4px 12px rgba(0,0,0,0.1); margin-bottom:20px; }
              ul { list-style-type:none; padding:0; max-width:600px; margin:0 auto; text-align:left; }
              li { background:#fff; margin-bottom:8px; padding:12px 16px; border-radius:8px; box-shadow:0 2px 6px rgba(0,0,0,0.05);}
              li a { text-decoration:none; color:#007bff; font-weight:600; }
              li a:hover { text-decoration:underline; }
              button { margin: 20px 0; padding: 10px 20px; font-size: 1em; cursor: pointer; border-radius:8px; border:none; background-color:#007bff; color:#fff; }
              button:hover { background-color:#0056b3; }
            </style>
          </head>
          <body>
            <h1>üèôÔ∏è Kings Cross Live Dashboard</h1>
            <p>Updated automatically every hour</p>
            <button onclick="refreshPage()">üîÑ Refresh Now</button>
            <img id="dashboardImg" src="kingscross_dashboard.png" alt="Current Dashboard">
            <img id="last24hImg" src="kingscross_temp_24h_tfl.png" alt="Last 24h Temperature + TfL Chart">
            <h2>üé´ Upcoming Events in King‚Äôs Cross</h2>
            <ul id="eventList">Loading events...</ul>
            <footer style="margin-top:40px; font-size:0.85em; color:#777;">
              Data sources: OpenWeather, TfL, Eventbrite | Dashboard generated with Python & GitHub Actions
            </footer>
            <script>
              setTimeout(() => location.reload(), 3600000);
              function refreshPage() { location.reload(); }
              fetch('data/events.json')
                .then(r => r.json())
                .then(events => {
                  const ul = document.getElementById('eventList'); ul.innerHTML = '';
                  if(events.length === 0){ ul.innerHTML = '<li>No upcoming events found.</li>'; }
                  events.slice(0,10).forEach(ev => {
