name: üèôÔ∏è Kings Cross Data Logger

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"  # runs every hour

jobs:
  fetch-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install requests matplotlib

      - name: Create and Run data fetch script
        env:
          TFL_APP_KEY: ${{ secrets.TFL_APP_KEY }}
        run: |
          python - <<'PYCODE'
          import requests, json, datetime, os, pathlib, matplotlib.pyplot as plt

          # --- WEATHER DATA ---
          lat, lon = 51.5308, -0.1238
          weather_url = f"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current_weather=true"
          r = requests.get(weather_url)
          if r.status_code != 200:
              print(f"‚ùå Weather API failed: {r.status_code}, {r.text}")
              exit(1)
          weather = r.json()["current_weather"]

          # --- TFL DATA ---
          tfl_key = os.getenv("TFL_APP_KEY")
          tfl_url = f"https://api.tfl.gov.uk/Line/Mode/tube/Status?app_key={tfl_key}"
          r = requests.get(tfl_url)
          if r.status_code != 200:
              print(f"‚ùå TfL API failed: {r.status_code}, {r.text}")
              exit(1)
          tfl_data = r.json()
          kings_cross_lines = {"Northern", "Piccadilly", "Victoria", "Circle", "Hammersmith & City", "Metropolitan"}
          tfl_filtered = [
              {"name": line["name"], "mode": line["modeName"], "status": line["lineStatuses"][0]["statusSeverityDescription"]}
              for line in tfl_data if line["name"] in kings_cross_lines
          ]

          # --- MERGE DATA ---
          dashboard = {
              "timestamp": datetime.datetime.utcnow().isoformat() + "Z",
              "weather": {
                  "temperature_C": weather["temperature"],
                  "windspeed_kmh": weather["windspeed"],
                  "weather_code": weather["weathercode"]
              },
              "tfl": tfl_filtered
          }

          pathlib.Path("data").mkdir(exist_ok=True)
          with open("data/kingscross_dashboard.json", "w") as f:
              json.dump(dashboard, f, indent=2)

          # --- Save historical temperature data ---
          history_path = "data/kingscross_history.json"
          history = []
          if os.path.exists(history_path):
              with open(history_path) as f:
                  history = json.load(f)
          history.append({"timestamp": dashboard["timestamp"], "temperature_C": dashboard["weather"]["temperature_C"]})
          with open(history_path, "w") as f:
              json.dump(history, f, indent=2)

          # --- Generate dashboard image ---
          timestamps = [datetime.datetime.fromisoformat(d["timestamp"].replace("Z", "")) for d in history]
          temps = [d["temperature_C"] for d in history]
          color_map = {
              "Good Service": "green",
              "Minor Delays": "orange",
              "Severe Delays": "red",
              "Part Closure": "purple",
              "Planned Closure": "gray",
              "Service Closed": "black"
          }

          fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
          ax1.plot(timestamps, temps, marker="o", color="blue")
          ax1.set_title("Kings Cross Temperature Trend (¬∞C)")
          ax1.set_xlabel("Time (UTC)")
          ax1.set_ylabel("Temperature ¬∞C")
          ax1.grid(True)

          names = [line["name"] for line in tfl_filtered]
          statuses = [line["status"] for line in tfl_filtered]
          colors = [color_map.get(s, "gray") for s in statuses]
          ax2.barh(names, [1]*len(names), color=colors)
          for i, s in enumerate(statuses):
              ax2.text(0.02, i, s, va="center", ha="left", color="white", fontsize=10, fontweight="bold")
          ax2.set_xlim(0, 1)
          ax2.set_xticks([])
          ax2.set_title("TfL Line Status at Kings Cross")

          update_time = datetime.datetime.utcnow().strftime("Updated: %d %b %Y, %H:%M UTC")
          fig.text(0.5, 0.01, update_time, ha="center", fontsize=9, color="gray")
          plt.tight_layout(rect=[0, 0.03, 1, 1])
          plt.savefig("data/kingscross_dashboard.png")
          print("‚úÖ Dashboard image saved.")
          PYCODE

      - name: Create simple web dashboard
        run: |
          cat > index.html <<'HTML'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Kings Cross Live Dashboard</title>
            <style>
              body { font-family: Arial, sans-serif; text-align: center; background: #fafafa; padding: 40px; }
              h1 { color: #333; }
              img { max-width: 90%; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
              p { color: #666; }
            </style>
          </head>
          <body>
            <h1>üèôÔ∏è Kings Cross Live Dashboard</h1>
            <p>Updated automatically every hour</p>
            <img src="data/kingscross_dashboard.png" alt="Dashboard">
            <p><a href="data/kingscross_dashboard.json" target="_blank">View JSON data</a></p>
          </body>
          </html>
          HTML

      - name: Commit and Push Updates
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git pull --rebase origin main || true
          git add index.html data/kingscross_dashboard.json data/kingscross_history.json data/kingscross_dashboard.png
          git commit -m "üöÄ Update dashboard + web page [skip ci]" || echo "No changes to commit"
          git push origin main
