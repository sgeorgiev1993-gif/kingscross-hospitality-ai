name: 🏙️ Kings Cross Data Logger

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"  # runs every hour

jobs:
  fetch-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install requests matplotlib

      - name: Create data fetch script
        run: |
          cat > fetch_data.py <<'PYCODE'
          import requests, json, datetime, os, pathlib

          # --- WEATHER DATA ---
          lat, lon = 51.5308, -0.1238
          weather_url = f"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current_weather=true"
          r = requests.get(weather_url)
          if r.status_code != 200:
              print(f"❌ Weather API failed: {r.status_code}, {r.text}")
              exit(1)
          weather = r.json()["current_weather"]

          # --- TFL DATA ---
          tfl_key = os.getenv("TFL_APP_KEY")
          tfl_url = f"https://api.tfl.gov.uk/Line/Mode/tube/Status?app_key={tfl_key}"
          r = requests.get(tfl_url)
          if r.status_code != 200:
              print(f"❌ TfL API failed: {r.status_code}, {r.text}")
              exit(1)
          tfl_data = r.json()
          kings_cross_lines = {"Northern", "Piccadilly", "Victoria", "Circle", "Hammersmith & City", "Metropolitan"}
          tfl_filtered = [
              {"name": line["name"], "mode": line["modeName"], "status": line["lineStatuses"][0]["statusSeverityDescription"]}
              for line in tfl_data if line["name"] in kings_cross_lines
          ]

          # --- MERGE DATA ---
          dashboard = {
              "timestamp": datetime.datetime.utcnow().isoformat() + "Z",
              "weather": {
                  "temperature_C": weather["temperature"],
                  "windspeed_kmh": weather["windspeed"],
                  "weather_code": weather["weathercode"]
              },
              "tfl": tfl_filtered
          }

          pathlib.Path("data").mkdir(exist_ok=True)
          with open("data/kingscross_dashboard.json", "w") as f:
              json.dump(dashboard, f, indent=2)

          print(f"✅ Dashboard updated: {dashboard['weather']['temperature_C']}°C, {len(tfl_filtered)} lines")
          PYCODE

      - name: Run data fetch script
        env:
          TFL_APP_KEY: ${{ secrets.TFL_APP_KEY }}
        run: python fetch_data.py

      - name: Generate dashboard image
        run: |
          python - <<'EOF'
          import json, os, datetime, matplotlib.pyplot as plt, pathlib

          pathlib.Path("data").mkdir(exist_ok=True)
          dashboard_path = "data/kingscross_dashboard.json"
          history_path = "data/kingscross_history.json"

          # Load data
          with open(dashboard_path) as f:
              latest = json.load(f)

          history = []
          if os.path.exists(history_path):
              with open(history_path) as f:
                  history = json.load(f)

          # Append latest reading
          history.append({
              "timestamp": latest["timestamp"],
              "temperature_C": latest["weather"]["temperature_C"]
          })
          with open(history_path, "w") as f:
              json.dump(history, f, indent=2)

          # Prepare plotting
          timestamps = [datetime.datetime.fromisoformat(d["timestamp"].replace("Z", "")) for d in history]
          temps = [d["temperature_C"] for d in history]
          tfl_lines = latest["tfl"]

          # Define status colors
          color_map = {
              "Good Service": "green",
              "Minor Delays": "orange",
              "Severe Delays": "red",
              "Part Closure": "purple",
              "Planned Closure": "gray",
              "Service Closed": "black"
          }

          # --- Plot layout ---
          fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

          # Left: Temperature trend
          ax1.plot(timestamps, temps, marker="o", color="blue")
          ax1.set_title("Kings Cross Temperature Trend (°C)")
          ax1.set_xlabel("Time (UTC)")
          ax1.set_ylabel("Temperature °C")
          ax1.grid(True)

          # Right: TfL Line Status
          names = [line["name"] for line in tfl_lines]
          statuses = [line["status"] for line in tfl_lines]
          colors = [color_map.get(s, "gray") for s in statuses]

          ax2.barh(names, [1]*len(names), color=colors)
          for i, s in enumerate(statuses):
              ax2.text(0.02, i, s, va="center", ha="left", color="white", fontsize=10, fontweight="bold")

          ax2.set_xlim(0, 1)
          ax2.set_xticks([])
          ax2.set_title("TfL Line Status at Kings Cross")
          ax2.set_ylabel("")
          plt.tight_layout()

          # Save final image
          plt.savefig("data/kingscross_dashboard.png")
          print("✅ Dashboard image saved: data/kingscross_dashboard.png")
          EOF

      - name: Commit and Push Data
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add data/kingscross_dashboard.json data/kingscross_history.json data/kingscross_dashboard.png
          git commit -m "📊 Update Kings Cross dashboard image [skip ci]" || echo "No changes to commit"
          git push
